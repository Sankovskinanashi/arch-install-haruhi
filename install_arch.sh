#!/bin/bash
set -euo pipefail

EFI_LABEL="EFI"
ROOT_LABEL="ROOT"
BOOT_SIZE="512M"
FS_TYPE="ext4"
DISK=""
EFI_PART=""
ROOT_PART=""
HOSTNAME="haruhi"
USERNAME="kyon"
LOCALE="ru_RU.UTF-8"
KEYMAP="ru"
TIMEZONE="Europe/Moscow"
CPU_VENDOR=""
GPU_VENDOR=""
INSTALL_AMD_DRIVERS=false
INSTALL_NVIDIA_DRIVERS=false
DE_CHOICE=""
HYPRLAND_CONFIG=""
WAYBAR_CONFIG=""
WAYBAR_STYLE=""
SWAYNC_CONFIG=""
SWAYNC_STYLE=""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
check_internet() {
    printf "[*] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...\n"
    if ! ping -c 1 -W 3 archlinux.org &>/dev/null; then
        printf "[!] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É.\n" >&2
        printf "[i] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Wi-Fi:\n"
        printf "    1. iwctl\n"
        printf "    2. station wlan0 scan\n"
        printf "    3. station wlan0 get-networks\n"
        printf "    4. station wlan0 connect <SSID>\n"
        printf "[i] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Ethernet: dhcpcd\n" >&2
        exit 1
    fi
    printf "[+] –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.\n"
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∂–µ–ª–µ–∑–∞
detect_hardware() {
    CPU_VENDOR=$(lscpu | grep -i "vendor id" | awk '{print $3}')
    GPU_VENDOR=$(lspci | grep -i "vga\|3d\|display" | awk -F: '{print $3}' | tr '[:upper:]' '[:lower:]')
    
    [[ "$GPU_VENDOR" == *"nvidia"* ]] && INSTALL_NVIDIA_DRIVERS=true
    [[ "$GPU_VENDOR" == *"amd"* || "$GPU_VENDOR" == *"radeon"* ]] && INSTALL_AMD_DRIVERS=true
    
    printf "[*] –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:\n"
    printf "    CPU: %s\n" "$CPU_VENDOR"
    printf "    GPU: %s\n" "$GPU_VENDOR"
    printf "    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–æ–≤ NVIDIA: %s\n" "$INSTALL_NVIDIA_DRIVERS"
    printf "    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–æ–≤ AMD: %s\n" "$INSTALL_AMD_DRIVERS"
}

# –í—ã–±–æ—Ä –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞
select_desktop_environment() {
    printf "\n[?] –í—ã–±–µ—Ä–∏—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞:\n"
    printf "  [1] GNOME (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ, —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Wayland)\n"
    printf "  [2] Hyprland (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Wayland compositor)\n"
    
    while true; do
        read -rp "–í–∞—à –≤—ã–±–æ—Ä [1/2]: " de_choice
        case "$de_choice" in
            1) DE_CHOICE="gnome"; break ;;
            2) DE_CHOICE="hyprland"; break ;;
            *) printf "[!] –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä\n" >&2 ;;
        esac
    done
    printf "[+] –í—ã–±—Ä–∞–Ω–æ: %s\n" "$DE_CHOICE"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è Hyprland
generate_hyprland_config() {
    HYPRLAND_CONFIG=$(cat <<'HYPRCONF'
# ~/.config/hypr/hyprland.conf
# –ë–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è Hyprland

# –ú–æ–Ω–∏—Ç–æ—Ä
monitor=,preferred,auto,1

# –í—Ö–æ–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
input {
    kb_layout = us,ru
    kb_options = grp:alt_shift_toggle
    repeat_rate = 35
    repeat_delay = 250
}

# –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
general {
    gaps_in = 5
    gaps_out = 10
    border_size = 2
    col.active_border = rgb(89b4fa)
    col.inactive_border = rgba(595959aa)
    layout = dwindle
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–æ–Ω
dwindle {
    pseudotile = true
    preserve_split = true
}

master {
    new_is_master = true
}

# –†–∞–∑–Ω–æ–µ
misc {
    disable_hyprland_logo = true
    disable_splash_rendering = true
}

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
decoration {
    rounding = 5
    active_opacity = 1.0
    inactive_opacity = 1.0
    fullscreen_opacity = 1.0
    drop_shadow = false
}

# –ê–Ω–∏–º–∞—Ü–∏–∏
animations {
    enabled = false
}

# –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
exec-once = dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP
exec-once = systemctl --user import-environment WAYLAND_DISPLAY XDG_CURRENT_DESKTOP
exec-once = /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1

# –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
$mainMod = SUPER

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
bind = $mainMod, RETURN, exec, kitty
bind = $mainMod, Q, killactive
bind = $mainMod, F, fullscreen
bind = $mainMod, SPACE, togglefloating
bind = $mainMod, R, exec, wofi --show drun

# –î–≤–∏–∂–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–∞
bind = $mainMod, left, movefocus, l
bind = $mainMod, right, movefocus, r
bind = $mainMod, up, movefocus, u
bind = $mainMod, down, movefocus, d

# –†–∞–±–æ—á–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5

# –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–∫–æ–Ω –º–µ–∂–¥—É —Ä–∞–±–æ—á–∏–º–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞–º–∏
bind = $mainMod SHIFT, 1, movetoworkspace, 1
bind = $mainMod SHIFT, 2, movetoworkspace, 2
bind = $mainMod SHIFT, 3, movetoworkspace, 3
bind = $mainMod SHIFT, 4, movetoworkspace, 4
bind = $mainMod SHIFT, 5, movetoworkspace, 5

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–æ–º
bind = , XF86AudioRaiseVolume, exec, pactl set-sink-volume @DEFAULT_SINK@ +5%
bind = , XF86AudioLowerVolume, exec, pactl set-sink-volume @DEFAULT_SINK@ -5%
bind = , XF86AudioMute, exec, pactl set-sink-mute @DEFAULT_SINK@ toggle
HYPRCONF
)
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è Waybar
generate_waybar_config() {
    WAYBAR_CONFIG=$(cat <<'WAYBARCONF'
{
    "layer": "top",
    "position": "top",
    "height": 30,
    "modules-left": ["hyprland/workspaces", "hyprland/window"],
    "modules-center": ["clock"],
    "modules-right": ["pulseaudio", "network", "cpu", "memory", "temperature", "battery", "tray"],
    
    "hyprland/workspaces": {
        "format": "{name}",
        "on-click": "activate"
    },
    
    "clock": {
        "format": "{:%H:%M}",
        "tooltip-format": "{:%A, %d %B %Y}"
    },
    
    "pulseaudio": {
        "format": "{volume}% {icon}",
        "format-muted": "üîá",
        "format-icons": ["üîà", "üîâ", "üîä"],
        "on-click": "pactl set-sink-mute @DEFAULT_SINK@ toggle",
        "on-scroll-up": "pactl set-sink-volume @DEFAULT_SINK@ +5%",
        "on-scroll-down": "pactl set-sink-volume @DEFAULT_SINK@ -5%"
    },
    
    "network": {
        "format-wifi": "{signalStrength}% üì°",
        "format-ethernet": "üåê",
        "format-disconnected": "‚ùå",
        "tooltip-format": "{ifname} ({essid}) {ipaddr}/{cidr}"
    },
    
    "cpu": {
        "format": "CPU {usage}%",
        "interval": 5
    },
    
    "memory": {
        "format": "RAM {used:0.1f}G/{total:0.1f}G",
        "interval": 5
    },
    
    "temperature": {
        "format": "{temperatureC}¬∞C",
        "critical-threshold": 80,
        "interval": 5
    },
    
    "battery": {
        "format": "{capacity}% {icon}",
        "format-icons": ["üîã", "üîå"],
        "format-charging": "‚ö°{capacity}%",
        "interval": 10
    }
}
WAYBARCONF
)

    WAYBAR_STYLE=$(cat <<'WAYBARCSS'
* {
    border: none;
    border-radius: 0;
    font-family: "JetBrains Mono", "Symbols Nerd Font";
    font-size: 14px;
    min-height: 0;
}

window#waybar {
    background: rgba(40, 40, 40, 0.9);
    color: #ffffff;
}

#workspaces button {
    padding: 0 5px;
    background: transparent;
    color: #ffffff;
    border-bottom: 3px solid transparent;
}

#workspaces button.focused {
    background: #64727D;
    border-bottom: 3px solid #ffffff;
}

#workspaces button.urgent {
    background-color: #eb4d4b;
}

#clock, #battery, #cpu, #memory, #temperature, #network, #pulseaudio {
    padding: 0 10px;
    margin: 0 5px;
}

#clock {
    background-color: #64727D;
}

#battery {
    background-color: #ffffff;
    color: #000000;
}

#battery.charging {
    color: #ffffff;
    background-color: #26A65B;
}

#cpu {
    background-color: #2ecc71;
    color: #000000;
}

#memory {
    background-color: #9b59b6;
}

#temperature {
    background-color: #f0932b;
}

#temperature.critical {
    background-color: #eb4d4b;
}

#network {
    background-color: #2980b9;
}

#network.disconnected {
    background-color: #f53c3c;
}

#pulseaudio {
    background-color: #f1c40f;
    color: #000000;
}

#pulseaudio.muted {
    background-color: #90b1b1;
    color: #2a5c45;
}

#tray {
    background-color: #2980b9;
}
WAYBARCSS
)
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è SwayNC
generate_swaync_config() {
    SWAYNC_CONFIG=$(cat <<'SWAYNCCONF'
{
  "$schema": "/etc/xdg/swaync/configSchema.json",
  "positionX": "right",
  "positionY": "top",
  "layer": "overlay",
  "control-center-layer": "top",
  "layer-shell": true,
  "cssPriority": "user",
  "control-center-margin-top": 8,
  "control-center-margin-bottom": 8,
  "control-center-margin-right": 8,
  "control-center-margin-left": 8,
  "notification-2fa-action": true,
  "notification-inline-replies": false,
  "notification-icon-size": 40,
  "notification-body-image-height": 100,
  "notification-body-image-width": 200,
  "timeout": 10,
  "timeout-low": 5,
  "timeout-critical": 0,
  "fit-to-screen": true,
  "relative-timestamps": true,
  "keyboard-shortcuts": true,
  "image-visibility": "when-available",
  "transition-time": 200,
  "hide-on-clear": true,
  "hide-on-action": true,
  "script-fail-notify": true
}
SWAYNCCONF
)

    SWAYNC_STYLE=$(cat <<'SWAYNCCSS'
* {
    font-family: "JetBrains Mono", "Symbols Nerd Font";
    font-size: 14px;
}

.notification-row {
    outline: none;
}

.notification {
    border-radius: 12px;
    margin: 6px;
    box-shadow: 0 0 0 1px rgba(255, 255, 255, 0.1);
    background: rgba(40, 40, 40, 0.95);
    color: #ffffff;
}

.notification-content {
    background: transparent;
    padding: 6px;
    border-radius: 12px;
}

.close-button {
    background: rgba(255, 255, 255, 0.1);
    color: #ffffff;
    text-shadow: none;
    padding: 2px;
    border-radius: 6px;
    margin: 4px;
}

.close-button:hover {
    background: rgba(255, 255, 255, 0.2);
    transition: all 0.15s ease-in-out;
}

.notification-default-action {
    border-radius: 12px;
}

.control-center {
    background: rgba(40, 40, 40, 0.95);
    border-radius: 12px;
    padding: 6px;
    box-shadow: 0 0 0 1px rgba(255, 255, 255, 0.1);
}

.control-center-list {
    background: transparent;
}

.floating-notifications {
    background: transparent;
}
SWAYNCCSS
)
}

# –í—ã–±–æ—Ä –¥–∏—Å–∫–∞
select_disk() {
    printf "\n[*] –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏—Å–∫–∏:\n"
    lsblk -dno NAME,SIZE,MODEL -e 7,11 | while read -r line; do
        printf "  /dev/%s\n" "$line"
    done
    
    while true; do
        read -rp "[?] –£–∫–∞–∂–∏—Ç–µ –¥–∏—Å–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä /dev/sda): " DISK
        if [[ ! -b "$DISK" ]]; then
            printf "[!] –£–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏—Å–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: %s\n" "$DISK" >&2
        else
            break
        fi
    done
}

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞–º–∏
manage_partitions() {
    printf "\n[*] –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã –Ω–∞ %s:\n" "$DISK"
    lsblk -o NAME,SIZE,FSTYPE,LABEL,MOUNTPOINT "$DISK"
    
    printf "\n[?] –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏?\n"
    printf "  [1] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ\n"
    printf "  [2] –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
    printf "  [3] –†—É—á–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ (cfdisk)\n"
    
    while true; do
        read -rp "–í—ã–±–æ—Ä: " action
        case "$action" in
            1) select_existing_partitions; break ;;
            2) wipe_and_create_partitions; break ;;
            3) manual_partitioning; break ;;
            *) printf "[!] –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä\n" >&2 ;;
        esac
    done
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
select_existing_partitions() {
    printf "\n[?] –í—ã –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
    printf "  - –ò–º–µ–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª EFI (FAT32) —Ä–∞–∑–º–µ—Ä–æ–º –Ω–µ –º–µ–Ω–µ–µ 100M\n"
    printf "  - –ò–º–µ–µ—Ç—Å—è –∫–æ—Ä–Ω–µ–≤–æ–π —Ä–∞–∑–¥–µ–ª –¥–ª—è Arch Linux\n"
    
    read -rp "[?] –£–∫–∞–∂–∏—Ç–µ EFI —Ä–∞–∑–¥–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä /dev/sda1): " EFI_PART
    read -rp "[?] –£–∫–∞–∂–∏—Ç–µ ROOT —Ä–∞–∑–¥–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä /dev/sda2): " ROOT_PART

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤
    if [[ ! -b "$EFI_PART" ]]; then
        printf "[!] EFI —Ä–∞–∑–¥–µ–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: %s\n" "$EFI_PART" >&2
        return 1
    fi
    if [[ ! -b "$ROOT_PART" ]]; then
        printf "[!] ROOT —Ä–∞–∑–¥–µ–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: %s\n" "$ROOT_PART" >&2
        return 1
    fi

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    printf "\n[!] –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∏ —Ä–∞–∑–¥–µ–ª—ã –±—É–¥—É—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã:\n"
    printf "  EFI: %s -> FAT32\n" "$EFI_PART"
    printf "  ROOT: %s -> %s\n" "$ROOT_PART" "$FS_TYPE"
    read -rp "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/[no]): " confirm
    [[ "$confirm" != "yes" ]] && return 1

    choose_filesystem "$ROOT_PART"
    format_partition "$EFI_PART" fat32 "$EFI_LABEL"
    format_partition "$ROOT_PART" "$FS_TYPE" "$ROOT_LABEL"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤
wipe_and_create_partitions() {
    printf "[!] –í—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ %s –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!\n" "$DISK"
    read -rp "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/[no]): " confirm
    [[ "$confirm" != "yes" ]] && return 1

    wipefs -a "$DISK"
    parted -s "$DISK" mklabel gpt

    parted -s "$DISK" mkpart "$EFI_LABEL" fat32 1MiB "$BOOT_SIZE"
    parted -s "$DISK" set 1 esp on
    parted -s "$DISK" mkpart "$ROOT_LABEL" "$FS_TYPE" "$BOOT_SIZE" 100%

    sync
    sleep 1

    EFI_PART=$(ls "${DISK}"* | grep -E "^${DISK}p?1$" || true)
    ROOT_PART=$(ls "${DISK}"* | grep -E "^${DISK}p?2$" || true)

    if [[ -z "$EFI_PART" || -z "$ROOT_PART" ]]; then
        printf "[!] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã\n" >&2
        return 1
    fi

    choose_filesystem "$ROOT_PART"
    format_partition "$EFI_PART" fat32 "$EFI_LABEL"
    format_partition "$ROOT_PART" "$FS_TYPE" "$ROOT_LABEL"
}

# –†—É—á–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ
manual_partitioning() {
    printf "\n[!] –ó–∞–ø—É—Å–∫ cfdisk –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è %s\n" "$DISK"
    cfdisk "$DISK"
    
    printf "\n[*] –ù–æ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã:\n"
    lsblk -o NAME,SIZE,FSTYPE,LABEL,MOUNTPOINT "$DISK"
    
    read -rp "[?] –£–∫–∞–∂–∏—Ç–µ EFI —Ä–∞–∑–¥–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä /dev/sda1): " EFI_PART
    read -rp "[?] –£–∫–∞–∂–∏—Ç–µ ROOT —Ä–∞–∑–¥–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä /dev/sda2): " ROOT_PART
    
    choose_filesystem "$ROOT_PART"
    format_partition "$EFI_PART" fat32 "$EFI_LABEL"
    format_partition "$ROOT_PART" "$FS_TYPE" "$ROOT_LABEL"
}

# –í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
choose_filesystem() {
    local part="$1"
    printf "\n[?] –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—ã –¥–ª—è %s:\n" "$part"
    printf "  [1] ext4 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
    printf "  [2] btrfs (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–Ω–∞–ø—à–æ—Ç–æ–≤)\n"
    printf "  [3] xfs (–≤—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)\n"
    
    while true; do
        read -rp "–í—ã–±–æ—Ä: " fs
        case "$fs" in
            1) FS_TYPE="ext4"; break ;;
            2) FS_TYPE="btrfs"; break ;;
            3) FS_TYPE="xfs"; break ;;
            *) printf "[!] –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä\n" >&2 ;;
        esac
    done
}

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
format_partition() {
    local part="$1" fstype="$2" label="$3"
    printf "\n[!] –í–°–ï –î–ê–ù–ù–´–ï –ù–ê %s –ë–£–î–£–¢ –£–î–ê–õ–ï–ù–´!\n" "$part"
    read -rp "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ? (yes/[no]): " confirm
    [[ "$confirm" != "yes" ]] && return
    
    case "$fstype" in
        fat32)
            printf "[+] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ %s –≤ FAT32...\n" "$part"
            mkfs.fat -F32 -n "$label" "$part"
            ;;
        ext4)
            printf "[+] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ %s –≤ ext4...\n" "$part"
            mkfs.ext4 -L "$label" "$part"
            ;;
        btrfs)
            printf "[+] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ %s –≤ Btrfs...\n" "$part"
            mkfs.btrfs -f -L "$label" "$part"
            ;;
        xfs)
            printf "[+] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ %s –≤ XFS...\n" "$part"
            mkfs.xfs -f -L "$label" "$part"
            ;;
        *)
            printf "[!] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –§–°: %s\n" "$fstype" >&2
            return 1
            ;;
    esac
}

# –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤
mount_partitions() {
    printf "\n[+] –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞...\n"
    mount "$ROOT_PART" /mnt
    
    printf "[+] –°–æ–∑–¥–∞–Ω–∏–µ EFI –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...\n"
    mkdir -p /mnt/boot/efi
    
    printf "[+] –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EFI —Ä–∞–∑–¥–µ–ª–∞...\n"
    mount "$EFI_PART" /mnt/boot/efi
    
    # –î–ª—è btrfs —Å–æ–∑–¥–∞–µ–º –ø–æ–¥—Ç–æ–º–∞
    if [[ "$FS_TYPE" == "btrfs" ]]; then
        printf "[+] –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–æ–º–æ–≤ Btrfs...\n"
        btrfs subvolume create /mnt/@
        btrfs subvolume create /mnt/@home
        btrfs subvolume create /mnt/@snapshots
        umount /mnt
        
        printf "[+] –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–æ–º–æ–≤...\n"
        mount -o compress=zstd,subvol=@ "$ROOT_PART" /mnt
        mkdir -p /mnt/{home,.snapshots,boot/efi}
        mount -o compress=zstd,subvol=@home "$ROOT_PART" /mnt/home
        mount -o compress=zstd,subvol=@snapshots "$ROOT_PART" /mnt/.snapshots
        mount "$EFI_PART" /mnt/boot/efi
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
install_base_system() {
    local packages="base base-devel linux linux-firmware nano git grub efibootmgr networkmanager"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∏–∫—Ä–æ–∫–æ–¥
    case "$CPU_VENDOR" in
        GenuineIntel) packages+=" intel-ucode" ;;
        AuthenticAMD) packages+=" amd-ucode" ;;
    esac
    
    printf "\n[+] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...\n"
    pacstrap /mnt $packages
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è fstab
generate_fstab() {
    printf "\n[+] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è fstab...\n"
    genfstab -U /mnt >> /mnt/etc/fstab
    
    # –î–ª—è btrfs –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏
    if [[ "$FS_TYPE" == "btrfs" ]]; then
        sed -i 's|subvol=/@ |subvol=/@,compress=zstd |' /mnt/etc/fstab
        sed -i 's|subvol=/@home|subvol=/@home,compress=zstd|' /mnt/etc/fstab
        sed -i 's|subvol=/@snapshots|subvol=/@snapshots,compress=zstd|' /mnt/etc/fstab
    fi
}

# –°–∫—Ä–∏–ø—Ç –¥–ª—è chroot
create_chroot_script() {
    local script_path="/mnt/root/chroot_script.sh"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥—Ä–∞–π–≤–µ—Ä–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    local gpu_drivers="mesa libva-mesa-driver"
    [[ "$INSTALL_AMD_DRIVERS" == true ]] && gpu_drivers+=" vulkan-radeon libva-mesa-driver"
    [[ "$INSTALL_NVIDIA_DRIVERS" == true ]] && gpu_drivers+=" nvidia nvidia-utils nvidia-settings"
    
    cat > "$script_path" <<EOF
#!/bin/bash
set -euo pipefail

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
ln -sf /usr/share/zoneinfo/$TIMEZONE /etc/localtime
hwclock --systohc

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
sed -i 's/^#\\($LOCALE\\)/\\1/' /etc/locale.gen
sed -i 's/^#\\(en_US.UTF-8\\)/\\1/' /etc/locale.gen
locale-gen

echo "LANG=$LOCALE" > /etc/locale.conf
echo "KEYMAP=$KEYMAP" > /etc/vconsole.conf

# –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
echo "$HOSTNAME" > /etc/hostname
cat > /etc/hosts << HOSTS
127.0.0.1   localhost
::1         localhost
127.0.1.1   $HOSTNAME.localdomain $HOSTNAME
HOSTS

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è root:"
passwd

useradd -m -G wheel -s /bin/bash $USERNAME
echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è $USERNAME:"
passwd $USERNAME

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ sudo
sed -i 's/^# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/' /etc/sudoers

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è multilib –¥–ª—è Steam –∏ 32-–±–∏—Ç–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
echo "–í–∫–ª—é—á–µ–Ω–∏–µ multilib —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
sed -i '/\[multilib\]/,/Include/s/^#//' /etc/pacman.conf
pacman -Sy

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ multilib –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
if ! grep -q "^\[multilib\]" /etc/pacman.conf; then
    echo "[!] –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å multilib!" >&2
    exit 1
fi

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
pacman -Syu --noconfirm

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
pacman -S --noconfirm openssh

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞
if [[ "$DE_CHOICE" == "gnome" ]]; then
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ GNOME
    pacman -S --noconfirm gnome gdm pipewire pipewire-alsa pipewire-pulse wireplumber xdg-user-dirs $gpu_drivers
    systemctl enable gdm
    systemctl enable NetworkManager
    pacman -S --noconfirm firefox libreoffice-fresh gimp vlc
    
elif [[ "$DE_CHOICE" == "hyprland" ]]; then
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Hyprland –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    pacman -S --noconfirm hyprland waybar swaync sddm wofi cliphist swappy grim slurp wl-clipboard xdg-desktop-portal-hyprland $gpu_drivers
    pacman -S --noconfirm ttf-font-awesome noto-fonts noto-fonts-emoji ttf-jetbrains-mono
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è –∏–≥—Ä
    pacman -S --noconfirm steam lutris wine gamemode lib32-gamemode
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SDDM
    systemctl enable sddm
    systemctl enable NetworkManager
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ Hyprland
    mkdir -p /home/$USERNAME/.config/hypr
    cat > /home/$USERNAME/.config/hypr/hyprland.conf << 'HYPRCONF'
$HYPRLAND_CONFIG
HYPRCONF
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ Waybar
    mkdir -p /home/$USERNAME/.config/waybar
    cat > /home/$USERNAME/.config/waybar/config << 'WAYBARCONF'
$WAYBAR_CONFIG
WAYBARCONF
    
    cat > /home/$USERNAME/.config/waybar/style.css << 'WAYBARCSS'
$WAYBAR_STYLE
WAYBARCSS
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ SwayNC
    mkdir -p /home/$USERNAME/.config/swaync
    cat > /home/$USERNAME/.config/swaync/config.json << 'SWAYNCCONF'
$SWAYNC_CONFIG
SWAYNCCONF
    
    cat > /home/$USERNAME/.config/swaync/style.css << 'SWAYNCCSS'
$SWAYNC_STYLE
SWAYNCCSS
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    mkdir -p /home/$USERNAME/.config/hypr/scripts
    cat > /home/$USERNAME/.config/hypr/scripts/screenshot.sh << 'SCR'
#!/bin/sh
grim -g "\$(slurp)" - | swappy -f -
SCR
    chmod +x /home/$USERNAME/.config/hypr/scripts/screenshot.sh
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–æ–µ–≤
    mkdir -p /home/$USERNAME/Pictures
    curl -L -o /home/$USERNAME/Pictures/wallpaper.jpg https://raw.githubusercontent.com/mateosss/arch-builder/main/wallpapers/anime-arch.jpg
    
    # –ü—Ä–∞–≤–∞ –Ω–∞ —Ñ–∞–π–ª—ã
    chown -R $USERNAME:$USERNAME /home/$USERNAME/.config
    chown $USERNAME:$USERNAME /home/$USERNAME/Pictures/wallpaper.jpg
fi

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ AUR helper
runuser -u $USERNAME -- bash -c '
cd /home/$USERNAME
git clone https://aur.archlinux.org/yay-bin.git
cd yay-bin
makepkg -si --noconfirm
'

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ AUR –ø–∞–∫–µ—Ç–æ–≤
if [[ "$DE_CHOICE" == "hyprland" ]]; then
    runuser -u $USERNAME -- yay -S --noconfirm swaylock-effects visual-studio-code-bin discord
elif [[ "$DE_CHOICE" == "gnome" ]]; then
    runuser -u $USERNAME -- yay -S --noconfirm visual-studio-code-bin discord
fi

# –û–±—â–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
pacman -S --noconfirm firefox libreoffice-fresh gimp vlc

# Flatpak
pacman -S --noconfirm flatpak
flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
flatpak install --noninteractive -y flathub org.telegram.desktop md.obsidian.Obsidian com.obsproject.Studio

# –í–∫–ª—é—á–µ–Ω–∏–µ —Å–ª—É–∂–±
systemctl enable NetworkManager
systemctl enable sshd

# –ü–ï–†–ï–ú–û–ù–¢–ò–†–û–í–ê–ù–ò–ï EFI –ü–ï–†–ï–î –£–°–¢–ê–ù–û–í–ö–û–ô GRUB
echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è EFI —Ä–∞–∑–¥–µ–ª–∞..."
if ! mount | grep -q '/boot/efi'; then
    echo "–ü–µ—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EFI —Ä–∞–∑–¥–µ–ª–∞..."
    umount /boot/efi 2>/dev/null || true
    mkdir -p /boot/efi
    mount $EFI_PART /boot/efi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã EFI
if ! findmnt -n -o FSTYPE /boot/efi | grep -q 'fat'; then
    echo "–û–®–ò–ë–ö–ê: –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ EFI –Ω–µ —è–≤–ª—è–µ—Ç—Å—è FAT32!"
    echo "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–∞–∑–¥–µ–ª $EFI_PART –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ."
    exit 1
fi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GRUB
echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ GRUB..."
if grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --recheck; then
    echo "GRUB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ."
else
    echo "–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ GRUB –≤ removable —Ä–µ–∂–∏–º–µ..."
    grub-install --target=x86_64-efi --efi-directory=/boot/efi --removable --recheck
fi
grub-mkconfig -o /boot/grub/grub.cfg

# –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ Wayland –¥–ª—è NVIDIA (—Ç–æ–ª—å–∫–æ –¥–ª—è GNOME)
if [[ "$INSTALL_NVIDIA_DRIVERS" == true && "$DE_CHOICE" == "gnome" ]]; then
    echo "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Wayland –¥–ª—è NVIDIA –≤ GDM..."
    [ -f /etc/gdm/custom.conf ] && sed -i 's/^#WaylandEnable=false/WaylandEnable=true/' /etc/gdm/custom.conf
fi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è Hyprland
if [[ "$DE_CHOICE" == "hyprland" ]]; then
    echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞..."
    usermod -a -G gamemode $USERNAME
    echo "export SDL_VIDEODRIVER=wayland" >> /home/$USERNAME/.bashrc
    echo "export CLUTTER_BACKEND=wayland" >> /home/$USERNAME/.bashrc
    echo "export MOZ_ENABLE_WAYLAND=1" >> /home/$USERNAME/.bashrc
fi
EOF

    chmod +x "$script_path"
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –≤ chroot
run_chroot_script() {
    printf "\n[+] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ chroot...\n"
    arch-chroot /mnt /root/chroot_script.sh
}

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
cleanup_and_reboot() {
    printf "\n[+] –û—Ç–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤...\n"
    umount -R /mnt
    
    printf "\n[‚úì] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
    printf "    –î–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $USERNAME\n"
    printf "    –ü–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≤–æ –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏\n\n"
    
    if [[ "$DE_CHOICE" == "hyprland" ]]; then
        printf "    –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Hyprland:\n"
        printf "    1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∞: hyprctl monitors\n"
        printf "    2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Waybar: ~/.config/waybar/config\n"
        printf "    3. –î–æ–±–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫\n\n"
    fi
    
    read -rp "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —Å–µ–π—á–∞—Å? (yes/[no]): " reboot_confirm
    [[ "$reboot_confirm" == "yes" ]] && reboot
}

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
main() {
    check_internet
    detect_hardware
    select_desktop_environment
    generate_hyprland_config
    generate_waybar_config
    generate_swaync_config
    select_disk
    manage_partitions
    mount_partitions
    install_base_system
    generate_fstab
    create_chroot_script
    run_chroot_script
    cleanup_and_reboot
}

main "$@"

